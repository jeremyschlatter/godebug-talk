Godebug and the wonders of code generation

Jeremy Schlatter
Go hacker, Mailgun
jeremy.schlatter@gmail.com

github.com/mailgun/godebug
github.com/jeremyschlatter/godebug-talk

* Outline

* Godebug

A cool new tool you should try.

* The wonders of code generation

A cool (old) technique that lets you build interesting things.

Well supported in Go.

* Concurrency

Often hard for debuggers. How to handle it?

* Motivation

* Motivation

Sometimes code does not do what we expect.

.play godebug/trick.go /func main/,

* Finding out what's going on

.code godebug/trick.go

Sometimes it's enough just to look more closely at the problematic code.

* Finding out what's going on

Another example

.play godebug/println.go /func someSubroutine/,/^}/

* Finding out what's going on

Other times a well-placed print statement or two will tell you what you need to know.

.play godebug/println2.go /START OMIT/,/END OMIT/

* Finding out what's going on

But what about bigger codebases?

.image godebug/img/git-diff-stat.png 400 _

3893 additions, 1243 deletions. At least 1 bug.

* gdb

* gdb

A standard, heavily-developed debugger.

* gdb

A standard, heavily-developed debugger.

    GDB does not understand Go programs well... Although GDB can be useful in some
    situations, it is not a reliable debugger for Go programs, particularly heavily
    concurrent ones. Moreover, it is not a priority for the Go project to address
    these issues, which are difficult.

    - https://golang.org/doc/gdb

Which is not a good fit for Go.

* gdb

Maybe it will work anyway?

DEMO

* godebug

DEMO

* godebug

* How (and why) it works

Godebug does not rely on low-level OS-specific runtime details.

Instead, it takes a target program's source code and outputs _new_ source code implementing a debugger for that program.

It supports heavy concurrency and is completely portable.

* Starting simple

The target program:

.play godebug/simple.go

* Starting simple

The debugger program:

.code godebug/simple-debugged.go

(DEMO)

* Starting simple

Pulling code out to a library:

.code godebug/simple-3.go

* Code generation

* Our mission

Transform this:

.play godebug/longer.go /func main/,

Into this:

.play godebug/longer-instrumented.go /func main/,

* Parsing

Using go/parser from the standard library:

.code godebug/v1/cmd.go /START OMIT/,/END OMIT/

_(See_also_golang.org/x/tools/go/loader)_

* Walking the AST

Only pay attention to function declarations:

.code godebug/v1/cmd.go /2 START OMIT/,/2 END OMIT/

Insert `godebug.Line()` as a go/ast struct literal:

.play godebug/v1/cmd.go /3 START OMIT/,/3 END OMIT/

_(and_print_with_go/printer)_

* What about concurrency?

* Concurrency

Consider this example program:

.play godebug/goroutines.go /func main/,

* Concurrency

What happens if we insert `godebug.Line()` calls here?

.code godebug/goroutines-2.go /func Foo/,

DEMO: goroutines-2.go

* Tracking the current goroutine

What if `godebug.Line` knew what the current goroutine was?

  func Line(goroutineID uint32)

Then we could do something like

    if atomic.LoadUint32(&currentGoroutine) != goroutineID {
        return
    }

to ignore all but the goroutine we are following.

* Can we get a goroutine identifier?

  We wouldn't even be having this discussion if thread local storage wasn't useful. But every 
  feature comes at a cost, and in my opinion the cost of threadlocals far outweighs their benefits. 
  They're just not a good fit for Go.

  - Andrew Gerrand

This question comes up a lot on the golang-nuts mailing list.

It is not likely to be added to the runtime.

* A different approach

There is a beautiful little library that solves this problem:

.link https://github.com/jtolds/gls github.com/jtolds/gls

Here's the idea:

  We define 16 special functions and embed base-16 tags into the stack using the call order of 
  those 16 functions. Then, we can read our tags back out of the stack looking at the callers list.

  We then use these tags as an index into a traditional map for implementing this library.

* Wrapping up

* Code generation is great

- You can implement a full, portable debugger with it. No DWARF/ELF required.
- Packages go/* and golang.org/x/tools/go/* make it easy.
- go generate

* Try godebug

Repo:

.link https://github.com/mailgun/godebug

* Known limitations

- The cli is awkward
- Performance overhead
- Reads from stdin -- will cause conflict if your program reads it too
- Can't attach to running process
- Must know the packages you want to debug prior to starting the session
- Not yet widely tested. ARM? Windows? gccgo? Should work, but has not been tried.

There will probably be broken edge cases. Let me know when you find them!

Pull requests and github issues are welcome.
